整个实验的代码以及每个 lab 的 commit 在
https://github.com/Vxlimo/CS2953-2024

1. 实现思路
    修改 syscall.c, user.h, usys.pl 等文件添加系统调用
    查阅 mmaptest.c 发现所有操作都是 PGSIZE 对齐的，只考虑这种情况
    1.1 mmap
        1.1.1 proc.h
            添加 vma 结构体，除了调用参数还包含“是否已经被映射”
            单个进程的最大 VMA 数量设置为 16
            VMA 的虚拟地址设置为从 TRAMPOLINE 之前从大到小分配
        1.1.2 sysfile.c
            检查所有参数合法，如果 mmap 是 shared，但是文件只读，直接拒绝
            把进程所有 vma 的位置排序，之后从后往前寻找可以满足条件的连续段
            记得 filedup 更新文件计数
        1.1.3 trap.c
            触发 vma page fault 的 r_scause 号为 13
            第一次触发时，直接把整个文件读入，对于每个页进行复制
            要记录每个页分配的 pa，如果一个页发生错误，取消操作之前要清空所有已经分配的页
        1.1.4 proc.c
            修改 allocproc, exit, fork 函数，增加对 vma 的管理
    1.2 munmap
        1.2.1 sysfile.c
            找到对应的 vma，修改 vma 的信息并取消映射
            如果是 shared 的，检查每个页，如果是 dirty 的（PTE_D，位置是 1<<7），写回文件
            如果已经全部取消映射，释放 vma，并释放文件计数
    1.3 第一次改进
        page fault 时，只读入 va 对应的页
        不需要记录哪些页被分配了，在 unmap 的时候直接通过 walkaddr 查找 pa，判断是否为 0 即可
    1.4 第二次改进（improvement）
        如果映射区域已经在 bcache 中，直接从 bcache 读入，并 pin 住不让释放
        bcache 的地址并不页对齐，需要用 kalloc 分配一个页对齐的内存
        unmap 时不好确定哪些页是 bcache 中的（这部分不能 free）
        正好 PTE 中还有一位 1<<9 ，用这一位 PTE_B 表示该页在 bcache 中，uvmunmap 之后 unpin

2. 实现中遇到的问题
    2.2 munmap
        2.2.1 sysfile.c
            写回文件时忘记 begin_op 和 end_op，导致 log_write outside of trans
            writei 的第二个参数要设置成 1，因为是 user_src
    2.4 第二次改进（improvement）
        一大堆死锁！要仔细处理 refcnt，exit，fork 很多地方的正确性都没有在 mmaptest 中出现
        bcache 在上一次 MAP_SHARED 的 mmap 中被修改，需要强制在 page fault 时重新从文件做 bread

3. make grade 结果
    == Test running mmaptest ==
    $ make qemu-gdb
    (4.3s)
    == Test   mmaptest: mmap f ==
    mmaptest: mmap f: OK
    == Test   mmaptest: mmap private ==
    mmaptest: mmap private: OK
    == Test   mmaptest: mmap read-only ==
    mmaptest: mmap read-only: OK
    == Test   mmaptest: mmap read/write ==
    mmaptest: mmap read/write: OK
    == Test   mmaptest: mmap dirty ==
    mmaptest: mmap dirty: OK
    == Test   mmaptest: not-mapped unmap ==
    mmaptest: not-mapped unmap: OK
    == Test   mmaptest: two files ==
    mmaptest: two files: OK
    == Test   mmaptest: fork_test ==
    mmaptest: fork_test: OK
    == Test usertests ==
    $ make qemu-gdb
    usertests: OK (115.3s)
    == Test lab-mmap-report.txt ==
    lab-mmap-report.txt: OK
    Score: 144/144
